/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rechevalfilm;

import AccessBD.BeanBDAccess;
import AccessBD.BeanBDOracle;
import Others.ImageRenderer;
import Others.ThreadCheckDatabase;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oracle.jdbc.OracleTypes;
import oracle.sql.ARRAY;
import oracle.sql.ArrayDescriptor;

/**
 *
 * @author Julien
 */
public class MainForm extends javax.swing.JFrame
{
    private BeanBDAccess Bean;
    private String CurrentDatabase;
    private ThreadCheckDatabase tcd;
    private String Login;
    
    /**
     * Creates new form MainForm
     */
    public MainForm()
    {
        initComponents();
        tcd = new ThreadCheckDatabase(this);
        tcd.start();
    }
    
    public synchronized void DatabaseConnection()
    {
        try
        {
            if(getCurrentDatabase() == null) // On tente de se connecte à CB
            {
                setBean(new BeanBDOracle("127.0.0.1", "1521", "xe", "CB", "CB123"));
                setCurrentDatabase("CB");
                System.out.println("On se connecte à CB !");
            }
            else
            {
                if(getCurrentDatabase().equals("CB"))
                {
                    if(getBean().getConnection().isValid(5))
                        System.out.println("CB a répondu présent !");
                    else
                    {
                        setBean(new BeanBDOracle("127.0.0.1", "1521", "xe", "CBB", "CBB123")); // Donc on se connecte à CBB
                        setCurrentDatabase("CBB");
                        System.out.println("CB n'est plus disponible ... On se connecte à CBB !");
                    }
                }
                else
                {
                    setBean(new BeanBDOracle("127.0.0.1", "1521", "xe", "CB", "CB123")); // CB de nouveau disponible
                    setCurrentDatabase("CB");
                    System.out.println("CB est de nouveau disponible !");
                }
            }
        }
        catch(SQLException ex)
        {
            if(ex.getErrorCode() == 28000) // Code erreur d'un compte inaccessible
            {
                try
                {
                    setBean(new BeanBDOracle("127.0.0.1", "1521", "xe", "CBB", "CBB123")); // Donc on se connecte à CBB
                    setCurrentDatabase("CBB");
                    System.out.println("CB n'est pas disponible ... On se connecte à CBB !");
                }
                catch (SQLException ex1) 
                {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
    }
    
    private void ClearTable()
    {
        DefaultTableModel dtm = (DefaultTableModel)tblResultat.getModel();
        int rowCount = dtm.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--)
            dtm.removeRow(i);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlIdFilm = new javax.swing.JPanel();
        tfdIdFilm = new javax.swing.JTextField();
        lblIdFilm = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResultat = new javax.swing.JTable();
        pnlAutresCriteres = new javax.swing.JPanel();
        tfdAnneeAvant = new javax.swing.JTextField();
        tfdAnneeApres = new javax.swing.JTextField();
        tfdRealisateurs = new javax.swing.JTextField();
        tfdActeurs = new javax.swing.JTextField();
        tfdTitre = new javax.swing.JTextField();
        lblTitreFilm = new javax.swing.JLabel();
        lblActeurs = new javax.swing.JLabel();
        lblRealisateurs = new javax.swing.JLabel();
        lblAvantAnnee = new javax.swing.JLabel();
        lblApresAnnee = new javax.swing.JLabel();
        lblInfos = new javax.swing.JLabel();
        btnRechercher = new javax.swing.JButton();
        pnlRechercherPar = new javax.swing.JPanel();
        lblRecherchePar = new javax.swing.JLabel();
        rdbIdFilm = new javax.swing.JRadioButton();
        rdbAutresCriteres = new javax.swing.JRadioButton();
        btnValider = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miConnexion = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlIdFilm.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlIdFilm.setEnabled(false);

        tfdIdFilm.setEnabled(false);

        lblIdFilm.setText("Identifiant du film : ");

        javax.swing.GroupLayout pnlIdFilmLayout = new javax.swing.GroupLayout(pnlIdFilm);
        pnlIdFilm.setLayout(pnlIdFilmLayout);
        pnlIdFilmLayout.setHorizontalGroup(
            pnlIdFilmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlIdFilmLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblIdFilm)
                .addGap(18, 18, 18)
                .addComponent(tfdIdFilm)
                .addContainerGap())
        );
        pnlIdFilmLayout.setVerticalGroup(
            pnlIdFilmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlIdFilmLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlIdFilmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfdIdFilm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIdFilm))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblResultat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Affiche", "Id", "Titre", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblResultat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblResultatMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblResultat);

        pnlAutresCriteres.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlAutresCriteres.setEnabled(false);

        tfdAnneeAvant.setEnabled(false);

        tfdAnneeApres.setEnabled(false);

        tfdRealisateurs.setEnabled(false);

        tfdActeurs.setEnabled(false);

        tfdTitre.setEnabled(false);

        lblTitreFilm.setText("Titre du film : ");

        lblActeurs.setText("Acteurs* : ");

        lblRealisateurs.setText("Réalisateurs* : ");

        lblAvantAnnee.setText("Avant année :");

        lblApresAnnee.setText("Après année:");

        lblInfos.setText("* si plusieurs, à séparer par des virgules.");

        javax.swing.GroupLayout pnlAutresCriteresLayout = new javax.swing.GroupLayout(pnlAutresCriteres);
        pnlAutresCriteres.setLayout(pnlAutresCriteresLayout);
        pnlAutresCriteresLayout.setHorizontalGroup(
            pnlAutresCriteresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAutresCriteresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAutresCriteresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAutresCriteresLayout.createSequentialGroup()
                        .addComponent(lblAvantAnnee)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(tfdAnneeAvant, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAutresCriteresLayout.createSequentialGroup()
                        .addComponent(lblApresAnnee)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tfdAnneeApres, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlAutresCriteresLayout.createSequentialGroup()
                        .addGroup(pnlAutresCriteresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAutresCriteresLayout.createSequentialGroup()
                                .addGroup(pnlAutresCriteresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTitreFilm)
                                    .addComponent(lblRealisateurs))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlAutresCriteresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfdActeurs, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                    .addComponent(tfdTitre)
                                    .addComponent(tfdRealisateurs)))
                            .addComponent(lblActeurs)
                            .addComponent(lblInfos))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlAutresCriteresLayout.setVerticalGroup(
            pnlAutresCriteresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAutresCriteresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAutresCriteresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitreFilm)
                    .addComponent(tfdTitre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlAutresCriteresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblActeurs)
                    .addComponent(tfdActeurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlAutresCriteresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfdRealisateurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRealisateurs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlAutresCriteresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfdAnneeAvant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAvantAnnee))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlAutresCriteresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfdAnneeApres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblApresAnnee))
                .addGap(18, 18, 18)
                .addComponent(lblInfos)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnRechercher.setText("Rechercher");
        btnRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRechercherActionPerformed(evt);
            }
        });

        pnlRechercherPar.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblRecherchePar.setText("Recherche par:");

        buttonGroup1.add(rdbIdFilm);
        rdbIdFilm.setSelected(true);
        rdbIdFilm.setText("Id du film");

        buttonGroup1.add(rdbAutresCriteres);
        rdbAutresCriteres.setText("Autres criteres");

        btnValider.setText("Valider");
        btnValider.setEnabled(false);
        btnValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValiderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlRechercherParLayout = new javax.swing.GroupLayout(pnlRechercherPar);
        pnlRechercherPar.setLayout(pnlRechercherParLayout);
        pnlRechercherParLayout.setHorizontalGroup(
            pnlRechercherParLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRechercherParLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRechercherParLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnValider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlRechercherParLayout.createSequentialGroup()
                        .addComponent(lblRecherchePar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlRechercherParLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdbAutresCriteres)
                            .addComponent(rdbIdFilm))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlRechercherParLayout.setVerticalGroup(
            pnlRechercherParLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRechercherParLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRechercherParLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRecherchePar)
                    .addComponent(rdbIdFilm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbAutresCriteres)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnValider)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("Connexion");

        miConnexion.setText("Se connecter");
        miConnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miConnexionActionPerformed(evt);
            }
        });
        jMenu1.add(miConnexion);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRechercher)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(pnlRechercherPar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlIdFilm, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlAutresCriteres, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlRechercherPar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlIdFilm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnlAutresCriteres, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRechercher)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miConnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miConnexionActionPerformed
        ConnectionForm CF = new ConnectionForm(this, true);
        CF.setVisible(true);
        String strLogin = CF.getLogin();
        String strPassword = CF.getPassword();

        System.out.println("Login : " + strLogin);
        System.out.println("Password : " + strPassword);

        try
        {
            getBean().FonctionStockee("RechFilm", "Connexion", 1);
            getBean().csRegisterOutParameter(1, OracleTypes.CURSOR);
            getBean().csSetString(2, strLogin);
            ResultSet rs = getBean().csFonctionExecute();
            rs.next();
            if(!rs.getString("Password").isEmpty() && rs.getString("Password").equals(strPassword))
            {
                btnValider.setEnabled(true);
                setLogin(strLogin);
            }
            else
                JOptionPane.showMessageDialog(this, "Le mot de passe entré est incorrecte.", "Mot de passe erroné", JOptionPane.ERROR_MESSAGE);

            rs.close();
        }
        catch (SQLException ex)
        {
            if(ex.getErrorCode() == 20999)
                DatabaseConnection();
            else
                Logger.getLogger(AddOpinionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_miConnexionActionPerformed

    private void tblResultatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblResultatMouseClicked
        DefaultTableModel dtm = (DefaultTableModel)tblResultat.getModel();
        System.out.println(dtm.getValueAt(tblResultat.getSelectedRow(), 1));
        DetailsMovieForm dmf = new DetailsMovieForm(this, true, (String)dtm.getValueAt(tblResultat.getSelectedRow(), 1), getLogin());
        dmf.setVisible(true);
    }//GEN-LAST:event_tblResultatMouseClicked

    private void btnRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRechercherActionPerformed
        try
        {
            ClearTable();
            DefaultTableModel dtm = (DefaultTableModel)tblResultat.getModel();
            ResultSet rs = null;
            if(tfdIdFilm.isEnabled())
            {
                if(!tfdIdFilm.getText().isEmpty())
                {
                    getBean().FonctionStockee("RechFilm", "GetMovie", 1);
                    getBean().csRegisterOutParameter(1, OracleTypes.CURSOR);
                    getBean().csSetString(2, tfdIdFilm.getText());
                    rs = getBean().csFonctionExecute();
                    while(rs.next())
                        dtm.addRow(new Object[] { rs.getBytes("Poster_path"), rs.getString("idMovie"), rs.getString("Title"), rs.getDate(3).toString() });
                }
                else
                    JOptionPane.showMessageDialog(this, "Vous devez spécifier l'identifiant du film !", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                getBean().FonctionStockee("RechFilm", "GetMovies", 5);
                getBean().csRegisterOutParameter(1, OracleTypes.CURSOR);

                /* SELECT du titre */
                if(!tfdTitre.getText().isEmpty())
                    getBean().csSetString(2, tfdTitre.getText());
                else
                    getBean().csSetNull(2, OracleTypes.VARCHAR);

                /* SELECT des Acteurs */
                if(!tfdActeurs.getText().isEmpty())
                {
                    String[] arrayActeurs = tfdActeurs.getText().split(",");
                    ArrayDescriptor ad = new ArrayDescriptor("T_ARRAY_NAME", getBean().getConnection());
                    ARRAY arrayToPass = new ARRAY(ad, getBean().getConnection(), arrayActeurs);
                    getBean().csSetArray(3, arrayToPass);

                    for (String Acteurs : arrayActeurs)
                    {
                        System.out.println("Acteurs = " + Acteurs);
                    }
                }
                else
                    getBean().csSetArrayNull(3, "T_ARRAY_NAME");

                /* SELECT des réalisateurs */
                if(!tfdRealisateurs.getText().isEmpty())
                {
                    String[] arrayRealisateurs = tfdRealisateurs.getText().split(",");
                    ArrayDescriptor ad = new ArrayDescriptor("T_ARRAY_NAME", getBean().getConnection());
                    ARRAY arrayToPass = new ARRAY(ad, getBean().getConnection(), arrayRealisateurs);
                    getBean().csSetArray(4, arrayToPass);
                }
                else
                    getBean().csSetArrayNull(4, "T_ARRAY_NAME");

                /* SELECT sur les dates */
                if(!tfdAnneeAvant.getText().isEmpty())
                    getBean().csSetString(5, tfdAnneeAvant.getText());
                else
                    getBean().csSetNull(5, OracleTypes.VARCHAR);

                if(!tfdAnneeApres.getText().isEmpty())
                    getBean().csSetString(6, tfdAnneeApres.getText());
                else
                    getBean().csSetNull(6, OracleTypes.VARCHAR);

                rs = getBean().csFonctionExecute();

                while(rs.next())
                {
                    getBean().FonctionStockee("RechFilm", "GetPoster", 1);
                    getBean().csRegisterOutParameter(1, OracleTypes.CURSOR);
                    getBean().csSetInt(2, rs.getInt("idPoster"));
                    ResultSet rsPoster = getBean().csFonctionExecute();
                    rsPoster.next();
                    dtm.addRow(new Object[] { rsPoster.getBytes("Poster_path"), rs.getString("idMovie"), rs.getString("Title"), rs.getDate(3).toString() });
                    rsPoster.close();
                }
            }
            tblResultat.getColumnModel().getColumn(0).setCellRenderer(new ImageRenderer());
            tblResultat.setModel(dtm);
            tblResultat.setRowHeight(262);
            rs.close();
        }
        catch (SQLException ex)
        {
            if(ex.getErrorCode() == 20999)
                DatabaseConnection();
            else
                Logger.getLogger(AddOpinionForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnRechercherActionPerformed

    private void btnValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValiderActionPerformed
        if(rdbIdFilm.isSelected())
        {
            tfdIdFilm.setEnabled(true);
            tfdActeurs.setEnabled(false);
            tfdRealisateurs.setEnabled(false);
            tfdAnneeAvant.setEnabled(false);
            tfdAnneeApres.setEnabled(false);
            tfdTitre.setEnabled(false);
        }
        else
        {
            tfdIdFilm.setEnabled(false);
            tfdActeurs.setEnabled(true);
            tfdRealisateurs.setEnabled(true);
            tfdAnneeAvant.setEnabled(true);
            tfdAnneeApres.setEnabled(true);
            tfdTitre.setEnabled(true);
        }
    }//GEN-LAST:event_btnValiderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRechercher;
    private javax.swing.JButton btnValider;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblActeurs;
    private javax.swing.JLabel lblApresAnnee;
    private javax.swing.JLabel lblAvantAnnee;
    private javax.swing.JLabel lblIdFilm;
    private javax.swing.JLabel lblInfos;
    private javax.swing.JLabel lblRealisateurs;
    private javax.swing.JLabel lblRecherchePar;
    private javax.swing.JLabel lblTitreFilm;
    private javax.swing.JMenuItem miConnexion;
    private javax.swing.JPanel pnlAutresCriteres;
    private javax.swing.JPanel pnlIdFilm;
    private javax.swing.JPanel pnlRechercherPar;
    private javax.swing.JRadioButton rdbAutresCriteres;
    private javax.swing.JRadioButton rdbIdFilm;
    private javax.swing.JTable tblResultat;
    private javax.swing.JTextField tfdActeurs;
    private javax.swing.JTextField tfdAnneeApres;
    private javax.swing.JTextField tfdAnneeAvant;
    private javax.swing.JTextField tfdIdFilm;
    private javax.swing.JTextField tfdRealisateurs;
    private javax.swing.JTextField tfdTitre;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the CurrentDatabase
     */
    public String getCurrentDatabase() {
        return CurrentDatabase;
    }

    /**
     * @param CurrentDatabase the CurrentDatabase to set
     */
    public void setCurrentDatabase(String CurrentDatabase) {
        this.CurrentDatabase = CurrentDatabase;
    }

    /**
     * @return the Login
     */
    public String getLogin() {
        return Login;
    }

    /**
     * @param Login the Login to set
     */
    public void setLogin(String Login) {
        this.Login = Login;
    }

    /**
     * @return the Bean
     */
    public BeanBDAccess getBean() {
        return Bean;
    }

    /**
     * @param Bean the Bean to set
     */
    public void setBean(BeanBDAccess Bean) {
        this.Bean = Bean;
    }
}
